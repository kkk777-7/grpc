// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchingServiceClient is the client API for MatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingServiceClient interface {
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (MatchingService_JoinRoomClient, error)
}

type matchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingServiceClient(cc grpc.ClientConnInterface) MatchingServiceClient {
	return &matchingServiceClient{cc}
}

func (c *matchingServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (MatchingService_JoinRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchingService_ServiceDesc.Streams[0], "/game.MatchingService/JoinRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchingServiceJoinRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchingService_JoinRoomClient interface {
	Recv() (*JoinRoomResponse, error)
	grpc.ClientStream
}

type matchingServiceJoinRoomClient struct {
	grpc.ClientStream
}

func (x *matchingServiceJoinRoomClient) Recv() (*JoinRoomResponse, error) {
	m := new(JoinRoomResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchingServiceServer is the server API for MatchingService service.
// All implementations must embed UnimplementedMatchingServiceServer
// for forward compatibility
type MatchingServiceServer interface {
	JoinRoom(*JoinRoomRequest, MatchingService_JoinRoomServer) error
	mustEmbedUnimplementedMatchingServiceServer()
}

// UnimplementedMatchingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchingServiceServer struct {
}

func (UnimplementedMatchingServiceServer) JoinRoom(*JoinRoomRequest, MatchingService_JoinRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedMatchingServiceServer) mustEmbedUnimplementedMatchingServiceServer() {}

// UnsafeMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingServiceServer will
// result in compilation errors.
type UnsafeMatchingServiceServer interface {
	mustEmbedUnimplementedMatchingServiceServer()
}

func RegisterMatchingServiceServer(s grpc.ServiceRegistrar, srv MatchingServiceServer) {
	s.RegisterService(&MatchingService_ServiceDesc, srv)
}

func _MatchingService_JoinRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchingServiceServer).JoinRoom(m, &matchingServiceJoinRoomServer{stream})
}

type MatchingService_JoinRoomServer interface {
	Send(*JoinRoomResponse) error
	grpc.ServerStream
}

type matchingServiceJoinRoomServer struct {
	grpc.ServerStream
}

func (x *matchingServiceJoinRoomServer) Send(m *JoinRoomResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MatchingService_ServiceDesc is the grpc.ServiceDesc for MatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.MatchingService",
	HandlerType: (*MatchingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinRoom",
			Handler:       _MatchingService_JoinRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/matching.proto",
}
